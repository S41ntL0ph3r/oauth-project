generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String?         @unique
  password         String?
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  accounts         Account[]
  Authenticator    Authenticator[]
  sessions         Session[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Admin Panel Models
model Admin {
  id           String      @id @default(cuid())
  email        String      @unique
  password     String
  name         String
  role         AdminRole   @default(ADMIN)
  status       AdminStatus @default(ACTIVE)
  avatar       String?
  lastLogin    DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdById  String?
  createdBy    Admin?      @relation("AdminCreator", fields: [createdById], references: [id])
  createdAdmins Admin[]    @relation("AdminCreator")
  logs         AdminLog[]
  products     Product[]

  @@map("admins")
}

model Product {
  id          String        @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int           @default(0)
  category    String
  images      String[]      @default([])
  status      ProductStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdById String
  createdBy   Admin         @relation(fields: [createdById], references: [id])

  @@map("products")
}

model AdminLog {
  id        String     @id @default(cuid())
  adminId   String
  action    String
  target    String?    // ID do item afetado
  targetType String?   // user, product, admin, etc.
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime   @default(now())
  admin     Admin      @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_logs")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  EDITOR
}

enum AdminStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}
